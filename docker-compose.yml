version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: skymanuals-postgres
    environment:
      POSTGRES_DB: skymanuals
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: skymanuals-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: skymanuals-api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/skymanuals
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: http://localhost:3000
      NODE_ENV: development
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: npm run dev --workspace=apps/api

  # Web Service
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: skymanuals-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    command: npm run dev --workspace=apps/web

volumes:
  postgres_data:
  redis_data:






