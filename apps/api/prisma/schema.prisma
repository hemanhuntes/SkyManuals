// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Epic-01: Structured Authoring & Collaboration Models

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  memberships Membership[]
  authoredChangeSets ChangeSet[] @relation("ChangeSetAuthor")
  editorSessions EditorSession[]
  
  @@map("users")
}

model Organization {
  id       String   @id @default(cuid())
  name     String
  slug     String   @unique
  logoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  memberships Membership[]
  manuals Manual[]
  templates Template[]
  
  @@map("organizations")
}

model Membership {
  id      String @id @default(cuid())
  userId  String
  organizationId String
  role    Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@map("memberships")
}

model Manual {
  id      String @id @default(cuid())
  organizationId String
  title   String
  status  ManualStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  chapters Chapter[]
  changeSets ChangeSet[]
  releaseSnapshots ReleaseSnapshot[]
  versions Version[]
  
  @@map("manuals")
}

model Chapter {
  id      String @id @default(cuid())
  manualId String
  title   String
  number  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  sections Section[]
  
  @@unique([manualId, number])
  @@map("chapters")
}

model Section {
  id      String @id @default(cuid())
  chapterId String
  title   String
  number  String
  status  SectionStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  blocks Block[]
  editorSessions EditorSession[]
  
  @@unique([chapterId, number])
  @@map("sections")
}

model Block {
  id      String @id @default(cuid())
  sectionId String
  content Json // TipTap JSON format
  smartBlockType SmartBlockType?
  smartBlockConfig Json? // Smart block configuration
  attachments String[] // Array of attachment IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@map("blocks")
}

model Attachment {
  id            String @id @default(cuid())
  fileName      String
  originalFileName String
  mimeType      String
  size          Int
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  
  @@map("attachments")
}

model Version {
  id         String @id @default(cuid())
  etag       String @unique // UUID for optimistic locking
  manualId   String
  chapterId  String?
  sectionId  String?
  blockId    String?
  changeSetId String
  createdAt  DateTime @default(now())
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  changeSet ChangeSet @relation(fields: [changeSetId], references: [id], onDelete: Cascade)
  editorSessions EditorSession[]
  
  @@map("versions")
}

model ChangeSet {
  id          String @id @default(cuid())
  manualId    String
  title       String
  description String?
  authorId    String
  status      ChangeSetStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  author User @relation("ChangeSetAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  changes Change[]
  versions Version[]
  releaseSnapshots ReleaseSnapshot[]
  
  @@map("change_sets")
}

model Change {
  id          String @id @default(cuid())
  changeSetId String
  entityType  EntityType
  entityId    String
  changeType  ChangeType
  oldValue    Json?
  newValue    Json?
  diff        String? // Textual diff representation
  createdAt   DateTime @default(now())
  
  // Relations
  changeSet ChangeSet @relation(fields: [changeSetId], references: [id], onDelete: Cascade)
  
  @@map("changes")
}

model ReleaseSnapshot {
  id             String @id @default(cuid())
  manualId       String
  changeSetId    String
  version        String
  contentSnapshot Json // Immutable snapshot of manual content
  createdAt      DateTime @default(now())
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  changeSet ChangeSet @relation(fields: [changeSetId], references: [id], onDelete: Cascade)
  
  @@map("release_snapshots")
}

model Template {
  id            String @id @default(cuid())
  organizationId String
  name          String
  description   String?
  blocks        Json // Array of TipTap documents
  smartBlocks   Json // Array of smart block definitions
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("templates")
}

model EditorSession {
  id           String @id @default(cuid())
  userId       String
  sectionId    String
  versionId    String
  isActive     Boolean @default(true)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, sectionId])
  @@map("editor_sessions")
}

// Enums
enum Role {
  ADMIN
  EDITOR
  REVIEWER
  READER
}

enum ManualStatus {
  DRAFT
  RELEASED
}

enum SectionStatus {
  DRAFT
  RELEASED
}

enum SmartBlockType {
  LEP
  MEL
  ChangeLog
  RevisionBar
  CrossRef
}

enum EntityType {
  MANUAL
  CHAPTER
  SECTION
  BLOCK
}

enum ChangeType {
  CREATE
  UPDATE
  DELETE
  MERGE
}

enum ChangeSetStatus {
  PENDING
  APPROVED
  REJECTED
  MERGED
}
