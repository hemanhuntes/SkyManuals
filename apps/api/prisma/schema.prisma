// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Epic-01: Structured Authoring & Collaboration Models

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Epic-01 Relations
  memberships Membership[]
  authoredChangeSets ChangeSet[] @relation("ChangeSetAuthor")
  editorSessions EditorSession[]
  
  // Epic-02 Relations
  initiatedWorkflows WorkflowInstance[] @relation("WorkflowInstanceInitiatedBy")
  cancelledWorkflows WorkflowInstance[] @relation("WorkflowInstanceCancelledBy")
  assignedTasks ApprovalTask[]
  completedTasks ApprovalTask[] @relation("ApprovalTaskCompletedBy")
  comments Comment[]
  completedChecklists Checklist[] @relation("ChecklistCompletedBy")
  notifications Notification[]
  
  @@map("users")
}

model Organization {
  id       String   @id @default(cuid())
  name     String
  slug     String   @unique
  logoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Epic-01 Relations
  memberships Membership[]
  manuals Manual[]
  templates Template[]
  
  // Epic-02 Relations
  workflowDefinitions WorkflowDefinition[]
  checklists Checklist[]
  checklistTemplates ChecklistTemplate[]
  
  @@map("organizations")
}

model Membership {
  id      String @id @default(cuid())
  userId  String
  organizationId String
  role    Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@map("memberships")
}

model Manual {
  id      String @id @default(cuid())
  organizationId String
  title   String
  status  ManualStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  chapters Chapter[]
  changeSets ChangeSet[]
  releaseSnapshots ReleaseSnapshot[]
  versions Version[]
  
  @@map("manuals")
}

model Chapter {
  id      String @id @default(cuid())
  manualId String
  title   String
  number  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  sections Section[]
  
  @@unique([manualId, number])
  @@map("chapters")
}

model Section {
  id      String @id @default(cuid())
  chapterId String
  title   String
  number  String
  status  SectionStatus @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  blocks Block[]
  editorSessions EditorSession[]
  
  @@unique([chapterId, number])
  @@map("sections")
}

model Block {
  id      String @id @default(cuid())
  sectionId String
  content Json // TipTap JSON format
  smartBlockType SmartBlockType?
  smartBlockConfig Json? // Smart block configuration
  attachments String[] // Array of attachment IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@map("blocks")
}

model Attachment {
  id            String @id @default(cuid())
  fileName      String
  originalFileName String
  mimeType      String
  size          Int
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  
  @@map("attachments")
}

model Version {
  id         String @id @default(cuid())
  etag       String @unique // UUID for optimistic locking
  manualId   String
  chapterId  String?
  sectionId  String?
  blockId    String?
  changeSetId String
  createdAt  DateTime @default(now())
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  changeSet ChangeSet @relation(fields: [changeSetId], references: [id], onDelete: Cascade)
  editorSessions EditorSession[]
  
  @@map("versions")
}

model ChangeSet {
  id          String @id @default(cuid())
  manualId    String
  title       String
  description String?
  authorId    String
  status      ChangeSetStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  author User @relation("ChangeSetAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  changes Change[]
  versions Version[]
  releaseSnapshots ReleaseSnapshot[]
  
  @@map("change_sets")
}

model Change {
  id          String @id @default(cuid())
  changeSetId String
  entityType  EntityType
  entityId    String
  changeType  ChangeType
  oldValue    Json?
  newValue    Json?
  diff        String? // Textual diff representation
  createdAt   DateTime @default(now())
  
  // Relations
  changeSet ChangeSet @relation(fields: [changeSetId], references: [id], onDelete: Cascade)
  
  @@map("changes")
}

model ReleaseSnapshot {
  id             String @id @default(cuid())
  manualId       String
  changeSetId    String
  version        String
  contentSnapshot Json // Immutable snapshot of manual content
  createdAt      DateTime @default(now())
  
  // Relations
  manual Manual @relation(fields: [manualId], references: [id], onDelete: Cascade)
  changeSet ChangeSet @relation(fields: [changeSetId], references: [id], onDelete: Cascade)
  
  @@map("release_snapshots")
}

model Template {
  id            String @id @default(cuid())
  organizationId String
  name          String
  description   String?
  blocks        Json // Array of TipTap documents
  smartBlocks   Json // Array of smart block definitions
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("templates")
}

model EditorSession {
  id           String @id @default(cuid())
  userId       String
  sectionId    String
  versionId    String
  isActive     Boolean @default(true)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, sectionId])
  @@map("editor_sessions")
}

// Enums
enum Role {
  ADMIN
  EDITOR
  REVIEWER
  READER
}

enum ManualStatus {
  DRAFT
  RELEASED
}

enum SectionStatus {
  DRAFT
  RELEASED
}

enum SmartBlockType {
  LEP
  MEL
  ChangeLog
  RevisionBar
  CrossRef
}

enum EntityType {
  MANUAL
  CHAPTER
  SECTION
  BLOCK
}

enum ChangeType {
  CREATE
  UPDATE
  DELETE
  MERGE
}

enum ChangeSetStatus {
  PENDING
  APPROVED
  REJECTED
  MERGED
}

// Epic-02: Configurable Review & Approval Models

model WorkflowDefinition {
  id             String @id @default(cuid())
  organizationId String
  name           String
  description    String?
  entityType     EntityType // Which entity this workflow applies to
  stages         Json // Array of WorkflowStage objects
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workflowInstances WorkflowInstance[]
  
  @@map("workflow_definitions")
}

model WorkflowInstance {
  id                  String @id @default(cuid())
  workflowDefinitionId String
  entityType          EntityType
  entityId            String
  title               String
  description         String?
  initiatedByUserId   String
  currentStageId      String?
  status              WorkflowInstanceStatus @default(DRAFT)
  priority            WorkflowPriority @default(MEDIUM)
  metadata            Json? // Flexible metadata for workflow context
  scheduledAt         DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  cancelledAt         DateTime?
  cancelledByUserId   String?
  rejectionReason     String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  workflowDefinition WorkflowDefinition @relation(fields: [workflowDefinitionId], references: [id], onDelete: Cascade)
  initiatedBy User @relation("WorkflowInstanceInitiatedBy", fields: [initiatedByUserId], references: [id], onDelete: Cascade)
  cancelledBy User? @relation("WorkflowInstanceCancelledBy", fields: [cancelledByUserId], references: [id], onDelete: SetNull)
  tasks ApprovalTask[]
  checklists Checklist[]
  
  @@map("workflow_instances")
}

model ApprovalTask {
  id               String @id @default(cuid())
  workflowInstanceId String
  stageId          String
  assignedToUserId String
  entityType       EntityType
  entityId         String
  priority         WorkflowPriority @default(MEDIUM)
  status           TaskStatus @default(PENDING)
  dueAt            DateTime?
  completedAt      DateTime?
  completedByUserId String?
  commentsCount    Int @default(0)
  attachments      String[] // Array of attachment IDs
  metadata         Json? // Flexible metadata for task context
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  workflowInstance WorkflowInstance @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)
  assignedTo User @relation(fields: [assignedToUserId], references: [id], onDelete: Cascade)
  completedBy User? @relation("ApprovalTaskCompletedBy", fields: [completedByUserId], references: [id], onDelete: SetNull)
  comments Comment[]
  
  @@map("approval_tasks")
}

model Comment {
  id               String @id @default(cuid())
  taskId           String
  userId           String
  content          String
  type             CommentType @default(GENERAL)
  isInternal       Boolean @default(false)
  attachments      String[] // Array of attachment IDs
  mentionedUserIds String[] // Array of mentioned user IDs for notifications
  parentCommentId  String? // For threaded discussions
  isResolved       Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  task ApprovalTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment? @relation("CommentThread", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentThread")
  
  @@map("comments")
}

model Checklist {
  id               String @id @default(cuid())
  taskId           String?
  workflowInstanceId String?
  title            String
  description      String?
  organizationId   String
  type             ChecklistType @default(AUDIT)
  templateId       String?
  items            Json // Array of ChecklistItem objects
  isComplete       Boolean @default(false)
  completedAt      DateTime?
  completedByUserId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  task ApprovalTask? @relation(fields: [taskId], references: [id], onDelete: SetNull)
  workflowInstance WorkflowInstance? @relation(fields: [workflowInstanceId], references: [id], onDelete: SetNull)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  completedBy User? @relation("ChecklistCompletedBy", fields: [completedByUserId], references: [id], onDelete: SetNull)
  
  @@map("checklists")
}

model ChecklistTemplate {
  id             String @id @default(cuid())
  organizationId String
  name           String
  description    String?
  type           ChecklistType @default(AUDIT)
  isDefault      Boolean @default(false)
  items          Json // Array of ChecklistItem objects (without task-specific fields)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("checklist_templates")
}

model Notification {
  id           String @id @default(cuid())
  userId       String
  type         NotificationType
  title        String
  message      String
  channels     NotificationChannel[] // Array of notification channels
  entityType   EntityTypeNotification?
  entityId     String?
  isRead       Boolean @default(false)
  readAt       DateTime?
  scheduledFor DateTime? // For delayed/reminder notifications
  deliveredAt  DateTime?
  metadata     Json? // Flexible notification metadata
  createdAt    DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model ApprovalSignature {
  id               String @id @default(cuid())
  workflowInstanceId String
  signerName       String
  signerRole       String
  signatureDate    DateTime
  signaturePath    String? // Path to signature file or hash
  signaturePayload Json? // Encrypted signature data
  isValid          Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("approval_signatures")
}

// Epic-02 Enums
enum WorkflowInstanceStatus {
  DRAFT
  IN_PROGRESS
  APPROVED
  REJECTED
  SUSPENDED
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  PENDING
  APPROVED
  REJECTED
  DELEGATED
  SUSPENDED
  COMPLETED
}

enum CommentType {
  GENERAL
  APPROVAL_REASON
  REJECTION_REASON
  DELEGATION_NOTE
}

enum ChecklistType {
  AUDIT
  REVIEW
  COMPLIANCE
  CUSTOM
}

enum WorkflowPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  COMMENT_ADDED
  WORKFLOW_STATUS_CHANGE
  APPROVAL_REQUEST
  REJECTION_WITH_COMMENTS
  MENTION
}

enum NotificationChannel {
  EMAIL
  WEB_PUSH
  IN_APP
  SLACK
}

enum EntityTypeNotification {
  TASK
  WORKFLOW_INSTANCE
  COMMENT
}
